package binfileutils;

import java.util.BitSet;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.Path;

/**
 * This class decodes binary files generated by Amverseas. This class can decode
 * message types 1 , 2 and 3.
 *
 * @author Pedro Pena
 * @version 1.0
 *
 */
public class AmverseasBinDecoder {

    static BitSet bits; //holds bits from file

    /**
     * The constructor accepts the filename of the bin file to decode.
     *
     * @param filePath A string representing the absolute filename of the bin
     * file to decode.
     */
    public AmverseasBinDecoder(String filePath) {//constructor accepts a sting representing the file and populates bits.
        try {

            Path path = Paths.get(filePath);
            byte[] data = Files.readAllBytes(path);
            bits = changeEndian(BitSet.valueOf(data));

        } catch (Exception e) {
            System.out.println(e);
        }

    }//end constructor

    /**
     * <strong>(FXY1011)</strong>-This method returns the ship's WMO ID
     *
     * @return    <strong>(FXY1011)</strong>-This method returns a the ship's WMO
     * ID
     */
    public String getCallsign() {
        return toString(0, 71);
    }// end method

    /**
     * <strong>(FXY48211)</strong>-This method returns the old message type.
     *
     * @return  <strong>(FXY48211)</strong>-This method returns the old message
     * type.
     */
    public int getOldMessageType() {

        return toInteger(72, 77);
    }

    /**
     * <strong>(FXY48216)</strong>-This method returns the new message types
     * used in Amverseas
     *
     * @return  <strong>(FXY48216)</strong>-This method returns the new message
     * types used in Amverseas The types can be a value from 1-3.
     */
    public int getNewMessageType() {

        return toInteger(78, 87);
    }

    /**
     * <strong>(FXY5001)</strong>-This method returns the latitude where the
     * measurement was made.
     *
     * @return  <strong>(FXY5001)</strong>-This method returns the latitude where
     * the measurement was made. The value is returned in decimal degrees.
     */
    public double getLatitude() {
        int[] start = {88, 88, 88};
        int[] end = {112, 112, 112};
        int mt = getNewMessageType() - 1;

        return (toInteger(start[mt], end[mt]) - 9000000) / 100000.0;

    }//end method

    /**
     * <strong>(FXY6001)</strong>-This method returns the longitude where the
     * measurement was made
     *
     * @return  <strong>(FXY6001)</strong>-This method returns the longitude
     * where the measurement was made. The value is returned in decimal degrees.
     */
    public double getLongitude() {
        int[] start = {113, 113, 113};
        int[] end = {138, 138, 138};
        int mt = getNewMessageType() - 1;

        return (toInteger(start[mt], end[mt]) - 18000000) / 100000.0;
    }//end method

    /**
     * <strong>(FXY1080)</strong>-This method returns the name given to the
     * transect.
     *
     * @return  <strong>(FXY1080)</strong>-This method returns the name given to
     * the transect. e.g. AX10 This field became available beginning with
     * message type 2
     */
    public String getSoopLine() {
        int[] start = {-1, 139, 139};
        int[] end = {-1, 186, 186};
        int mt = getNewMessageType() - 1;

        return toString(start[mt], end[mt]);

    }

    /**
     * <strong>(FXY5036)</strong>-This method returns the transect number for
     * the line.
     *
     * @return<strong>(FXY5036)</strong>-This method returns the transect number
     * for the line. This is the number assigned to a transect repeated in the
     * same calendar year. e.g. The second transect would have a value of 2. A
     * value of -999 is returned when there is no value.
     */
    public int getTransectNumber() {
        int[] start = {-1, 187, 187};
        int[] end = {-1, 193, 193};
        int mt = getNewMessageType() - 1;

        return toInteger(start[mt], end[mt]);
    }

    /**
     * <strong>(FXY48304)</strong>-
     *
     * @return <strong>(FXY48304)</strong>-This method returns
     */
    public int getSequenceNumber() {
        int[] start = {-1, 194, 194};
        int[] end = {-1, 209, 209};
        int mt = getNewMessageType() - 1;

        return toInteger(start[mt], end[mt]);
    }

    /**
     * <strong>(FXY4001)</strong>-This method returns the year in which the
     * measurement was made.
     *
     * @return <strong>(FXY4001)</strong>-This method returns the year in which
     * the measurement was made. A value of -999 is returned when there is no
     * value.
     */
    public int getYear() {
        int[] start = {139, 210, 210};
        int[] end = {150, 221, 221};
        int mt = getNewMessageType() - 1;
        return toInteger(start[mt], end[mt]);
    }

    /**
     * <strong>(FXY4002)</strong>-This method returns the month in which the
     * measurement was made.
     *
     * @return <strong>(FXY4002)</strong>-This method returns the month in which
     * the measurement was made. A value of -999 is returned when there is no
     * value.
     */
    public int getMonth() {
        int[] start = {151, 222, 222};
        int[] end = {154, 225, 225};
        int mt = getNewMessageType() - 1;
        return toInteger(start[mt], end[mt]);
    }

    /**
     * <strong>(FXY4003)</strong>-This method returns the day in which the
     * measurement was made.
     *
     * @return <strong>(FXY4003)</strong>-This method returns the day in which
     * the measurement was made. A value of -999 is returned when there is no
     * value.
     */
    public int getDay() {
        int[] start = {155, 226, 226};
        int[] end = {160, 231, 231};
        int mt = getNewMessageType() - 1;
        return toInteger(start[mt], end[mt]);
    }

    /**
     * <strong>(FXY4004)</strong>-This method returns the GMT hour when the
     * measurement was made.
     *
     * @return <strong>(FXY4004)</strong>-This method returns the GMT hour when
     * the measurement was made. A value of -999 is returned when there is no
     * value.
     */
    public int getHour() {
        int[] start = {161, 232, 232};
        int[] end = {165, 236, 236};
        int mt = getNewMessageType() - 1;
        return toInteger(start[mt], end[mt]);
    }

    /**
     * <strong>(FXY4005)</strong>-This method returns the GMT minute when the
     * measurement was made
     *
     * @return <strong>(FXY4005)</strong>-This method returns the GMT minute
     * when the measurement was made A value of -999 is returned when there is
     * no value.
     */
    public int getMinute() {
        int[] start = {166, 237, 237};
        int[] end = {171, 242, 242};
        int mt = getNewMessageType() - 1;
        return toInteger(start[mt], end[mt]);
    }

    /**
     * <strong>(FXY1200)</strong>-This method returns the name of the ship. If
     * there is no
     *
     * @return <strong>(FXY1200)</strong>-This method returns the name of the
     * ship. If there is no name then the string "NONE" is returned.
     */
    public String getShipName() {
        int[] start = {172, 243, 243};
        int[] end = {411, 482, 482};
        int mt = getNewMessageType() - 1;
        return toString(start[mt], end[mt]);
    }

    /**
     * <strong>(FXY1201)</strong>-This method returns the ships International
     * Maritime Organization (IMO) number.
     *
     * @return <strong>(FXY1201)</strong>-This method returns the ships
     * International Maritime Organization (IMO) number. A value of -999 is
     * returned when there is no value.
     */
    public int getLloyds() {
        int[] start = {412, 483, 483};
        int[] end = {435, 506, 506};
        int mt = getNewMessageType() - 1;
        return toInteger(start[mt], end[mt]);
    }

    /**
     * <strong>(FXY48302)</strong>-This method returns the CRC value for the bin
     * file.
     *
     * @return <strong>(FXY48302)</strong>-This method returns the CRC value for
     * the bin file. This value is computed by WRITE LOGIC HERE Once computed,
     * the value returned by this method must match. If there is not a match,
     * then the bin file is possibly corrupt. A value of -999 is returned when
     * there is no value.
     */
    public int getUniqueTag() {
        int[] start = {436, 507, 507};
        int[] end = {467, 538, 538};
        int mt = getNewMessageType() - 1;
        return toInteger(start[mt], end[mt]);
    }

    /**
     * <strong>(FXY48201)</strong>-This method returns the version of Amverseas
     * used to make the measurement.
     *
     * @return <strong>(FXY48201)</strong>-This method returns the version of
     * Amverseas used to make the measurement. This value must later be massaged
     * to get the actual version. e.g. 920 must be dived by 100 to get Amverseas
     * version 9.20 A value of -999 is returned when there is no value.
     */
    public int getSeasVersion() {
        int[] start = {468, 539, 539};
        int[] end = {477, 548, 548};
        int mt = getNewMessageType() - 1;
        return toInteger(start[mt], end[mt]);
    }

    /**
     * <strong>(FXY48300)</strong>-This method returns the serial number of the
     * XBT used to make the measurement.
     *
     * @return <strong>(FXY48300)</strong>-This method returns the serial number
     * of the XBT used to make the measurement. A value of -999 is returned when
     * there is no value.
     */
    public int getProbeSerialNumber() {
        int[] start = {478, 549, 549};
        int[] end = {497, 572, 572};
        int mt = getNewMessageType() - 1;
        return toInteger(start[mt], end[mt]);
    }

    /**
     * <strong>(FXY48303)</strong>-This method returns the resolution of the
     * profile.
     *
     * @return <strong>(FXY48303)</strong>-This method returns the resolution of
     * the profile. A value of 1 is full resolution a value of 2 is 1 meter
     * resolution and a value of 3 is two meter resolution. A value of -999 is
     * returned when there is no value.
     */
    public int getThisDataIs() {
        int[] start = {498, 573, 573};
        int[] end = {500, 575, 575};
        int mt = getNewMessageType() - 1;
        return toInteger(start[mt], end[mt]);
    }

    /**
     * <strong>(FXY33003)</strong>-This method returns the quality of the data
     * as entered by the user.
     *
     * @return <strong>(FXY33003)</strong>-This method returns the quality of
     * the data as entered by the user. If the user suspects the data is of a
     * quality other than good, the user can add it to the profile after the
     * measurement has been made. A value of -999 is returned when there is no
     * value.
     */
    public int getDataQuality() {
        int[] start = {501, 576, 576};
        int[] end = {503, 578, 578};
        int mt = getNewMessageType() - 1;
        return toInteger(start[mt], end[mt]);
    }

    /**
     * <strong>(FXY48305)</strong>-This method returns the approximate height of
     * the autolauncher from the surface of the water.
     *
     * @return <strong>(FXY48305)</strong>-This method returns the approximate
     * height of the autolauncher from the surface of the water. A value of
     * -9.99 is returned when there is no value.
     */
    public double getLauncherHeight() {

        int[] start = {-1, 579, 579};
        int[] end = {-1, 591, 591};
        int mt = getNewMessageType() - 1;
        return toInteger(start[mt], end[mt]) / 100.0;
    }

    /**
     * <strong>(FXY1012)</strong>-This method returns the direction in degrees
     * that the ship was heading when the measurement was made.
     *
     * @return <strong>(FXY1012)</strong>-This method returns the direction in
     * degrees that the ship was heading when the measurement was made. A value
     * of -999.0 is returned when there is no value.
     */
    public double getShipDirection() {
        int[] start = {-1, 592, 592};
        int[] end = {-1, 600, 600};
        int mt = getNewMessageType() - 1;
        return toInteger(start[mt], end[mt]);
    }//end method

    /**
     * <strong>(FXY1013)</strong>-This method returns the speed of the ship in
     * km/h when the measurement was made.
     *
     * @return <strong>(FXY1013)</strong>-This method returns the speed of the
     * ship in km/h when the measurement was made. A value of -9.99 is returned
     * when there is no value.
     */
    public double getShipSpeed() {
        int[] start = {-1, 601, 601};
        int[] end = {-1, 613, 613};
        int mt = getNewMessageType() - 1;
        return toInteger(start[mt], end[mt]) / 100.0;
    }//end method

    /**
     * <strong>(FXY22067)</strong>-This method returns a table value that
     * represents the type of probe used to make the measurement.
     *
     * @return <strong>(FXY22067)</strong>-This method returns a table value
     * that represents the type of probe used to make the measurement.<br>
     * e.g. a value of 52 refers to a Deep Blue XBT. A value of -999 is returned
     * when there is no value.
     */
    public int getInstrumentType() {
        int[] start = {504, 614, 614};
        int[] end = {513, 623, 623};
        int mt = getNewMessageType() - 1;
        return toInteger(start[mt], end[mt]);
    }//end method

    /**
     * <strong>(FXY22068)</strong>-This method returns a table value that
     * represents the device that determines the thermistor value in the XBT.
     *
     * @return <strong>(FXY22068)</strong>-This method returns a table value
     * that represents the device that determines the thermistor value in the
     * XBT.<br>
     * e.g. a value of 6 refers to any of the different Sippican MK21 models. A
     * value of -999 is returned when there is no value.
     *
     */
    public int getRecorderType() {
        int[] start = {514, 624, 624};
        int[] end = {520, 630, 630};
        int mt = getNewMessageType() - 1;
        return toInteger(start[mt], end[mt]);
    }//end method

    /**
     * <strong>(FXY2002)</strong>-This method returns a table value that
     * represents the type of anemometer used.
     *
     * @return <strong>(FXY2002)</strong>-This method returns a table value that
     * represents the type of anemometer used. A value of -999 is returned when
     * there is no value.
     */
    public int getWindInstrumentType() {
        int[] start = {521, 631, 631};
        int[] end = {524, 634, 634};
        int mt = getNewMessageType() - 1;
        return toInteger(start[mt], end[mt]);
    }//end method

    /**
     * <strong>(FXY11001)</strong>-This method returns the wind direction in
     * degrees at the time of the measurement.
     *
     * @return <strong>(FXY11001)</strong>-This method returns the wind
     * direction in degrees at the time of the measurement. A value of -999 is
     * returned when there is no value.
     */
    public double getWindDiretion() {
        int[] start = {525, 635, 635};
        int[] end = {533, 643, 643};
        int mt = getNewMessageType() - 1;

        return toInteger(start[mt], end[mt]);
    }//end method

    /**
     * <strong>(FXY11002)</strong>-This method returns the wind speed in degrees
     * at the time of the measurement.
     *
     * @return <strong>(FXY11002)</strong>-This method returns the wind speed in
     * degrees at the time of the measurement. A value of -99.9 is returned when
     * there is no value.
     */
    public double getWindSpeed() {
        int[] start = {534, 644, 644};
        int[] end = {545, 655, 655};
        int mt = getNewMessageType() - 1;
        return toInteger(start[mt], end[mt]) / 10.0;
    }//end method

    /**
     * <strong>(FXY12004)</strong>-This method returns the dry bulb temperature
     * at the time of the measurement.
     *
     * @return <strong>(FXY12004)</strong>-This method returns the dry bulb
     * temperature at the time of the measurement. A value of -99.9 is returned
     * when there is no value.
     */
    public double getDryBulbTemp() {
        int[] start = {546, 656, 656};
        int[] end = {557, 667, 667};
        int mt = getNewMessageType() - 1;
        return toInteger(start[mt], end[mt]) / 10.0;
    }//end method

    /**
     * <strong>(FXY2030)</strong>-This method returns the sea current
     * measurement method.
     *
     * @return <strong>(FXY2030)</strong>-This method returns the sea current
     * measurement method. A value of -999 is returned when there is no value.
     */
    public int getCurrentMeasurementMethod() {
        int[] start = {558, 668, 668};
        int[] end = {560, 670, 670};
        int mt = getNewMessageType() - 1;
        return toInteger(start[mt], end[mt]);
    }//end method

    /**
     * <strong>(FXY22004)</strong>-This method returns the sea surface current
     * direction .
     *
     * @return <strong>(FXY22004)</strong>-This method returns the sea surface
     * current direction . A value of -999 is returned when there is no value.
     */
    public int getCurrentDirection() {
        int[] start = {561, 671, 671};
        int[] end = {569, 679, 679};
        int mt = getNewMessageType() - 1;
        return toInteger(start[mt], end[mt]);
    }//end method

    /**
     * <strong>(FXY22031)</strong>-This method returns the sea surface current
     * speed
     *
     * @return <strong>(FXY22031)</strong>-This method returns the sea surface
     * current speed A value of -999 is returned when there is no value.
     */
    public double getCurrentSpeed() {
        int[] start = {570, 680, 680};
        int[] end = {582, 692, 692};
        int mt = getNewMessageType() - 1;
        return toInteger(start[mt], end[mt]) / 100.00;
    }//end method

    /**
     * <strong>(FXY22063)</strong>-This method returns the total water depth at
     * the location where the measurement was made.
     *
     * @return <strong>(FXY22063)</strong>-This method returns the total water
     * depth at the location where the measurement was made. A value of -999 is
     * returned when there is no value.
     */
    public int getTotalWaterDepth() {
        int[] start = {583, 693, 693};
        int[] end = {596, 706, 706};
        int mt = getNewMessageType() - 1;
        return toInteger(start[mt], end[mt]);
    }//end method

    /**
     * <strong>(FXY1036)</strong>-This method returns the agency in charge of
     * operating the observation platform.
     *
     * @return <strong>(FXY1036)</strong>-This method returns the agency in
     * charge of operating the observation platform. A value of -999 is returned
     * when there is no value.
     */
    public int getAgencyOwner() {
        int[] start = {-1, -1, 707};
        int[] end = {-1, -1, 726};
        int mt = getNewMessageType() - 1;
        return toInteger(start[mt], end[mt]);
    }//end method

    /**
     * <strong>(FXY22178)</strong>-This method returns a table value that
     * represents the type of launcher used.
     *
     * @return <strong>(FXY22178)</strong>-This method returns a table value
     * that represents the type of launcher used. A value of -999 is returned
     * when there is no value.
     */
    public int getXBTLauncherType() {
        int[] start = {-1, -1, 727};
        int[] end = {-1, -1, 734};
        int mt = getNewMessageType() - 1;
        return toInteger(start[mt], end[mt]);
    }//end method

    /**
     * <strong>(FXY2171)</strong>-This method returns the serial number of the
     * recorder used.
     *
     * @return <strong>(FXY2171)</strong>-This method returns the serial number
     * of the recorder used. A value of -999 is returned when there is no value.
     */
    public String getXBTRecorderSerialNumber() {
        int[] start = {-1, -1, 735};
        int[] end = {-1, -1, 798};
        int mt = getNewMessageType() - 1;
        return toString(start[mt], end[mt]);
    }// end method

    /**
     * <strong>(FXY4001)</strong>-This method returns the year in which the
     * recorder was manufactured.
     *
     * @return <strong>(FXY4001)</strong>-This method returns the year in which
     * the recorder was manufactured. A value of -999 is returned when there is
     * no value.
     */
    public int getXBTRecorderManufacturedYear() {
        int[] start = {-1, -1, 799};
        int[] end = {-1, -1, 810};
        int mt = getNewMessageType() - 1;
        return toInteger(start[mt], end[mt]);
    }// end method

    /**
     * <strong>(FXY4002)</strong>-This method returns the month in which the
     * recorder was manufactured.
     *
     * @return <strong>(FXY4002)</strong>-This method returns the month in which
     * the recorder was manufactured. A value of -999 is returned when there is
     * no value.
     */
    public int getXBTRecorderManufacturedMonth() {
        int[] start = {-1, -1, 811};
        int[] end = {-1, -1, 814};
        int mt = getNewMessageType() - 1;
        return toInteger(start[mt], end[mt]);
    }// end method

    /**
     * <strong>(FXY4003)</strong>-This method returns the day in which the
     * recorder was manufactured.
     *
     * @return <strong>(FXY4003)</strong>-This method returns the day in which
     * the recorder was manufactured. A value of -999 is returned when there is
     * no value.
     */
    public int getXBTRecorderManufacturedDay() {
        int[] start = {-1, -1, 815};
        int[] end = {-1, -1, 820};
        int mt = getNewMessageType() - 1;
        return toInteger(start[mt], end[mt]);
    }// end method

    /**
     * <strong>(FXY4001)</strong>-This method returns the year the XBT was
     * manufactured.
     *
     * @return <strong>(FXY4001)</strong>-This method returns the year the XBT
     * was manufactured. A value of -999 is returned when there is no value.
     */
    public int getXBTProbeManufacturedYear() {
        int[] start = {-1, -1, 821};
        int[] end = {-1, -1, 832};
        int mt = getNewMessageType() - 1;
        return toInteger(start[mt], end[mt]);
    }// end method

    /**
     * <strong>(FXY4002)</strong>-This method returns the month in which the XBT
     * was manufactured.
     *
     * @return <strong>(FXY4002)</strong>-This method returns the month in which
     * the XBT was manufactured. A value of -999 is returned when there is no
     * value.
     */
    public int getXBTProbeManufacturedMonth() {
        int[] start = {-1, -1, 833};
        int[] end = {-1, -1, 836};
        int mt = getNewMessageType() - 1;
        return toInteger(start[mt], end[mt]);
    }// end method

    /**
     * <strong>(FXY4003)</strong>-This method returns the day in which the XBT
     * was manufactured.
     *
     * @return <strong>(FXY4003)</strong>-This method returns the day in which
     * the XBT was manufactured. A value of -999 is returned when there is no
     * value.
     */
    public int getXBTProbeManufacturedDay() {
        int[] start = {-1, -1, 837};
        int[] end = {-1, -1, 842};
        int mt = getNewMessageType() - 1;
        return toInteger(start[mt], end[mt]);
    }// end method

    /**
     * <strong>(FXY31001B)</strong>-This method returns the number of 40 bit
     * blocks or 5 characters, used to store the rider name.
     *
     * @return <strong>(FXY31001B)</strong>-This method returns the number of 40
     * bit blocks or 5 characters, used to store the rider name. A value of -999
     * is returned when there is no value.
     */
    public int getNumberOfRiderBlocks() {
        int[] start = {-1, -1, 843};
        int[] end = {-1, -1, 848};
        int mt = getNewMessageType() - 1;
        return toInteger(start[mt], end[mt]);
    }// end method

    /**
     * <strong>(FXY31001B)</strong>-This method returns the number of 40 bit
     * blocks or 5 characters, used to store the riders institution's name.
     *
     * @return <strong>(FXY31001B)</strong>-This method returns the number of 40
     * bit blocks or 5 characters, used to store the riders institution's name.
     * A value of -999 is returned when there is no value.
     */
    public int getNumberOfRiderInstBlocks() {
        int[] start = {-1, -1, 849};
        int[] end = {-1, -1, 854};
        int mt = getNewMessageType() - 1;
        return toInteger(start[mt], end[mt]);
    }// end method

    /**
     * <strong>(FXY31001B)</strong>-This method returns the number of 40 bit
     * blocks or 5 characters, used to store the rider's email address.
     *
     * @return <strong>(FXY31001B)</strong>-This method returns the number of 40
     * bit blocks or 5 characters, used to store the rider's email address. A
     * value of -999 is returned when there is no value.
     */
    public int getNumberOfRiderEmailBlocks() {
        int[] start = {-1, -1, 855};
        int[] end = {-1, -1, 860};
        int mt = getNewMessageType() - 1;
        return toInteger(start[mt], end[mt]);
    }// end method

    /**
     * <strong>(FXY31001B)</strong>-This method returns the number of 40 bit
     * blocks or 5 characters, used to store the rider's phone number.
     *
     * @return <strong>(FXY31001B)</strong>-This method returns the number of 40
     * bit blocks or 5 characters, used to store the rider's phone number. A
     * value of -999 is returned when there is no value.
     */
    public int getNumberOfRiderPhoneBlocks() {
        int[] start = {-1, -1, 861};
        int[] end = {-1, -1, 866};
        int mt = getNewMessageType() - 1;
        return toInteger(start[mt], end[mt]);
    }// end method

    /**
     * <strong>(FXY100000)</strong>-Delayed Replicator
     *
     * @return <strong>(FXY100000)</strong>-Delayed Replicator! Different from
     * BUFR. The number contained within is the number of following consecutive
     * fields to replicate. This field must be followed by FXY31200 to identify
     * how many groups of replicated fields follow. Always delayed replication.
     * value of -999 is returned when there is no value.
     */
    public int getNumberOfRepFields() {
        int[] start = {597, 707, 867};
        int[] end = {604, 714, 874};
        int mt = getNewMessageType() - 1;
        return toInteger(start[mt], end[mt]);
    }// end method

    /**
     * <strong>(FXY31200)</strong>-This method returns the number of temperature
     * measurement points recorded.
     *
     * @return <strong>(FXY31200)</strong>-This method returns the number of
     * temperature measurement points recorded. A value of -999 is returned when
     * there is no value.
     */
    public int getTimesReplicated() {
        int[] start = {605, 715, 875};
        int[] end = {620, 730, 890};
        int mt = getNewMessageType() - 1;
        return toInteger(start[mt], end[mt]);
    }// end method

    /**
     * <strong>(FXY22042S)</strong>-This method returns the SST or the first
     * temperature measurement made.
     *
     * @return <strong>(FXY22042S)</strong>-This method returns the SST or the
     * first temperature measurement made. A value of -13.99 is returned when
     * there is no value.
     */
    public double getSeaTemperature() {
        int[] start = {621, 731, 891};
        int[] end = {632, 742, 902};
        int mt = getNewMessageType() - 1;
        return (toInteger(start[mt], end[mt]) - 400.00) / 100.00;
    }// end method

    /**
     * <strong>(FXY7062S)</strong>-This method returns the depth below the
     * sea/water surface
     *
     * @return <strong>(FXY7062S)</strong>-This method returns the depth below
     * the sea/water surface A value of -999 is returned when there is no value.
     */
    public double getSeaDepth() {
        int[] start = {633, -1, -1};
        int[] end = {646, -1, -1};
        int mt = getNewMessageType() - 1;
        return (double) (toInteger(start[mt], end[mt]));
    }// end method

    /**
     * <strong>(FXY22042S)</strong>-This method returns an array containing the
     * temperature measurements made.
     *
     * @return <strong>(FXY22042S)</strong>-This method returns an array
     * containing the temperature measurements made. An empty array is returned
     * when there are no values.
     */
    public double[] getTemperaturePoints() {
        int[] start = {621, 731, 891};
        int mt = getNewMessageType() - 1;

        int points = getTimesReplicated();
        if (points < 0) {
            return new double[0];
        }
        double temps[] = new double[points];
        int counter = 0;
        for (int i = start[mt]; i < start[mt] + points * 12; i += 12) {
            temps[counter] = (toInteger(i, i + 11) - 400.00) / 100.00;
            counter++;

        }//end for

        return temps;
    }// end method

    /**
     * <strong>(FXY205030A)</strong>-This method returns the rider's name.
     *
     * @return <strong>(FXY205030A)</strong>-This method returns the rider's
     * name. A value of "NONE" is returned when there is no value.
     */
    public String getRiderName() {
        int[] start = {-1, -1, 891};
        int mt = getNewMessageType() - 1;

        int s = start[mt] + 12 * getTimesReplicated();
        return toString(s, s + getNumberOfRiderBlocks() * 40);
    }// end method

    /**
     * <strong>(FXY205030A)</strong>-This method returns the rider's email.
     *
     * @return <strong>(FXY205030A)</strong>-This method returns the rider's
     * email. A value of "NONE" is returned when there is no value.
     */
    public String getRiderEmail() {
        int[] start = {-1, -1, 891};
        int mt = getNewMessageType() - 1;

        int s = start[mt] + 12 * getTimesReplicated() + getNumberOfRiderBlocks() * 40;
        return toString(s, s + getNumberOfRiderEmailBlocks() * 40);
    }// end method

    /**
     * <strong>(FXY205030A)</strong>-This method returns the rider's
     * institution.
     *
     * @return <strong>(FXY205030A)</strong>-This method returns the rider's
     * institution. A value of "NONE" is returned when there is no value.
     */
    public String getInstituion() {
        int[] start = {-1, -1, 891};
        int mt = getNewMessageType() - 1;

        int s = start[mt] + 12 * getTimesReplicated() + getNumberOfRiderBlocks() * 40 + getNumberOfRiderEmailBlocks() * 40;
        return toString(s, s + getNumberOfRiderInstBlocks() * 40);
    }// end method

    /**
     * <strong>(FXY205030A)</strong>-This method returns the rider's phone
     * number.
     *
     * @return <strong>(FXY205030A)</strong>-This method returns the rider's
     * phone number. A value of "NONE" is returned when there is no value.
     */
    public String getRiderPhone() {
        int[] start = {-1, -1, 891};
        int mt = getNewMessageType() - 1;

        int s = start[mt] + 12 * getTimesReplicated() + getNumberOfRiderBlocks() * 40 + getNumberOfRiderEmailBlocks() * 40 + getNumberOfRiderInstBlocks() * 40;
        return toString(s, s + getNumberOfRiderPhoneBlocks() * 40);
    }// end method

    /**
     * <strong>(FXY205030A)</strong>-This method computes and returns an integer
     * from a sequence of bits.
     *
     * @param start the position from which to start extracting a binary
     * sequence.
     * @param end the position from which to end extracting a binary sequence.
     * @return <strong>(FXY205030A)</strong>-This method computes and returns an
     * integer from a sequence of bits.
     */
    private int toInteger(int start, int end) {
        if (start < 0 || end < 0 || end - start <= 0) {
            return -999;
        }
        end++;
        BitSet b = bits.get(start, end);
        int integer = 0;
        char bit;
        int bLength = end - start;
        for (int i = 0; i < bLength; i++) {
            if (i < bLength + 1) {
                if (b.get(i)) {
                    bit = 0x01;
                } else {
                    bit = 0x00;
                }
                integer = integer | bit;
            }//end if
            if (i < bLength - 1) {
                integer = integer << 1;
            }

        }//end for

        return integer;
    }//end method

    /**
     * <strong>(FXY)</strong>-This method computes and returns a string from a
     * sequence of bits.
     *
     * @param start the position from which to start extracting a binary
     * sequence.
     * @param end the position from which to end extracting a binary sequence.
     * @return <strong>(FXY)</strong>-This method computes and returns a string
     * from a sequence of bits.
     */
    private String toString(int start, int end) {
        if (start < 0 || end < 0 || end - start <= 0) {
            return "NONE";
        }

        String str = "";
        BitSet b = bits.get(start, end);
        byte[] bytes;
        bytes = changeEndian(b).toByteArray();

        for (int i = 0; i < bytes.length; i++) {
            str += (char) bytes[i];
        }
        return str;
    }//end method

    /**
     * <strong>(FXY)</strong>-This method flips the "endianes" of a BitSet
     * object and returns a BitSet object with flipped "endianess".
     *
     * @return <strong>(FXY)</strong>-This method flips the "endianes" of a
     * BitSet object and returns a BitSet object with flipped "endianess".
     */
    private BitSet changeEndian(BitSet b) {
        boolean temp;
        for (int i = 0; i < b.length() - 1; i = i + 8) {
            for (int j = 0; j < 4; j++) {
                temp = b.get(i + j);
                b.set(i + j, b.get(i - j + 7));
                b.set(i - j + 7, temp);
            }//end for

        }//end for
        return b;
    }//end method

    /**
     * This method returns a string representation of the binary sequence in the
     * specified range in the bin file.
     *
     * @param start the bit position from which to start constructing the binary
     * sequence.
     * @param end the bit position from which to stop construction the binary
     * sequence.
     * @return <strong>(FXY)</strong>-This method returns a string
     * representation of the binary sequence in the specified range in the bin
     * file.
     */
    public String getBinarySequence(int start, int end) {
        String str = "";
        for (int i = start; i <= end; i++) {

            if (bits.get(i)) {
                str += "1";
            }
            if (!bits.get(i)) {
                str += "0";
            }
            if ((i - start + 1) % 8 == 0) {
                str += " ";
            }

        }//end for
        return str;
    }//end method

    /**
     * <strong>(FXY)</strong>-This method returns a String that includes all of
     * the info in the bin file.
     *
     * @return <strong>(FXY)</strong>-This method returns a String that includes
     * all of the info in the bin file.
     */
    @Override
    public String toString() {
        double[] tempPoints = getTemperaturePoints();
        String str = ""
                + "Callsign=" + getCallsign() + "\n"
                + "Old message type=" + getOldMessageType() + "\n"
                + "New message type=" + getNewMessageType() + "\n"
                + "Lat=" + getLatitude() + "\n"
                + "Lon=" + getLongitude() + "\n"
                + "Soopline=" + getSoopLine() + "\n"
                + "Transect#=" + getTransectNumber() + "\n"
                + "Sequence#=" + getSequenceNumber() + "\n"
                + "date=" + getMonth() + "/" + getDay() + "/" + getYear() + "\n"
                + "time=" + getHour() + ":" + getMinute() + "\n"
                + "ShipName=" + getShipName() + "\n"
                + "Lloyds=" + getLloyds() + "\n"
                + "Unique tag=" + Integer.toHexString(getUniqueTag()) + "\n"
                + "SeasVersion=" + getSeasVersion() + "\n"
                + "XBT Serial#=" + getProbeSerialNumber() + "\n"
                + "ThisDatais=" + getThisDataIs() + "\n"
                + "DataQuality=" + getDataQuality() + "\n"
                + "LauncherHeight=" + getLauncherHeight() + "\n"
                + "Ship direction=" + getShipDirection() + "\n"
                + "Ship Speed=" + getShipSpeed() + "\n"
                + "Instrument type=" + getInstrumentType() + "\n"
                + "Recorder type=" + getRecorderType() + "\n"
                + "Wind Instrument type=" + getWindInstrumentType() + "\n"
                + "Wind Direction=" + getWindDiretion() + "\n"
                + "Wind Speed=" + getWindSpeed() + "\n"
                + "Dry bulb temp=" + getDryBulbTemp() + "\n"
                + "Measure method=" + getCurrentMeasurementMethod() + "\n"
                + "Current Dir=" + getCurrentDirection() + "\n"
                + "Current Speed=" + getCurrentSpeed() + "\n"
                + "Total water depth=" + getTotalWaterDepth() + "\n"
                + "Agency Owner=" + getAgencyOwner() + "\n"
                + "XBT launcher type=" + getXBTLauncherType() + "\n"
                + "XBT Recorder Serial#=" + getXBTRecorderSerialNumber() + "\n"
                + "XBT Recorder Manufacture date=" + getXBTRecorderManufacturedMonth() + "/" + getXBTRecorderManufacturedDay() + "/" + getXBTRecorderManufacturedYear() + "\n"
                + "XBT Probe Manufacture date=" + getXBTProbeManufacturedMonth() + "/" + getXBTProbeManufacturedDay() + "/" + getXBTProbeManufacturedYear() + "\n"
                + "# of rider blocks=" + getNumberOfRiderBlocks() + "\n"
                + "# of rider email blocks=" + getNumberOfRiderEmailBlocks() + "\n"
                + "# of rider phone blocks=" + getNumberOfRiderPhoneBlocks() + "\n"
                + "# of rider inst blocks=" + getNumberOfRiderInstBlocks() + "\n"
                + "# of rep fields=" + getNumberOfRepFields() + "\n"
                + "Times replicated=" + getTimesReplicated() + "\n"
                + "Sea Temperature=" + getSeaTemperature() + "\n"
                + "SeaDepth=" + getSeaDepth() + "\n"
                + "Rider=" + getRiderName() + "\n"
                + "Email=" + getRiderEmail() + "\n"
                + "Phone=" + getRiderPhone() + "\n"
                + "Institution=" + getInstituion() + "\n"
                + "index,temperature\n";
        for (int i = 0; i < tempPoints.length; i++) {
            str += i + "," + tempPoints[i] + "\n";
        }//end for

        return str;
    }
}//end class

